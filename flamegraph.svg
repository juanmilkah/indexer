<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="1215056204812"><g><title>[indexer] (157,887,136 samples, 0.01%)</title><rect x="86.1678%" y="69" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="1046987783343" fg:w="157887136"/><text x="86.4178%" y="79.50"></text></g><g><title>[indexer] (930,563,857 samples, 0.08%)</title><rect x="86.1133%" y="85" width="0.0766%" height="15" fill="rgb(217,0,24)" fg:x="1046324853160" fg:w="930563857"/><text x="86.3633%" y="95.50"></text></g><g><title>__madvise (188,954,308 samples, 0.02%)</title><rect x="86.1911%" y="85" width="0.0156%" height="15" fill="rgb(221,193,54)" fg:x="1047269817705" fg:w="188954308"/><text x="86.4411%" y="95.50"></text></g><g><title>[indexer] (1,965,465,089 samples, 0.16%)</title><rect x="86.0493%" y="101" width="0.1618%" height="15" fill="rgb(248,212,6)" fg:x="1045546774328" fg:w="1965465089"/><text x="86.2993%" y="111.50"></text></g><g><title>[indexer] (3,035,566,363 samples, 0.25%)</title><rect x="85.9821%" y="117" width="0.2498%" height="15" fill="rgb(208,68,35)" fg:x="1044730946735" fg:w="3035566363"/><text x="86.2321%" y="127.50"></text></g><g><title>pthread_mutex_trylock (190,561,095 samples, 0.02%)</title><rect x="86.2163%" y="101" width="0.0157%" height="15" fill="rgb(232,128,0)" fg:x="1047575952003" fg:w="190561095"/><text x="86.4663%" y="111.50"></text></g><g><title>[libc.so.6] (140,743,534 samples, 0.01%)</title><rect x="86.2319%" y="117" width="0.0116%" height="15" fill="rgb(207,160,47)" fg:x="1047766513098" fg:w="140743534"/><text x="86.4819%" y="127.50"></text></g><g><title>__madvise (493,546,624 samples, 0.04%)</title><rect x="86.2435%" y="117" width="0.0406%" height="15" fill="rgb(228,23,34)" fg:x="1047907256632" fg:w="493546624"/><text x="86.4935%" y="127.50"></text></g><g><title>pthread_mutex_trylock (236,343,630 samples, 0.02%)</title><rect x="86.2841%" y="117" width="0.0195%" height="15" fill="rgb(218,30,26)" fg:x="1048400803256" fg:w="236343630"/><text x="86.5341%" y="127.50"></text></g><g><title>[indexer] (5,061,380,849 samples, 0.42%)</title><rect x="85.8878%" y="133" width="0.4166%" height="15" fill="rgb(220,122,19)" fg:x="1043585037129" fg:w="5061380849"/><text x="86.1378%" y="143.50"></text></g><g><title>pthread_mutex_trylock (154,631,940 samples, 0.01%)</title><rect x="86.3156%" y="133" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="1048783197839" fg:w="154631940"/><text x="86.5656%" y="143.50"></text></g><g><title>[indexer] (6,606,150,891 samples, 0.54%)</title><rect x="85.7852%" y="149" width="0.5437%" height="15" fill="rgb(240,193,28)" fg:x="1042338796783" fg:w="6606150891"/><text x="86.0352%" y="159.50"></text></g><g><title>[unknown] (128,636,594 samples, 0.01%)</title><rect x="86.3373%" y="149" width="0.0106%" height="15" fill="rgb(216,20,37)" fg:x="1049046846455" fg:w="128636594"/><text x="86.5873%" y="159.50"></text></g><g><title>[indexer] (128,636,594 samples, 0.01%)</title><rect x="86.3373%" y="133" width="0.0106%" height="15" fill="rgb(206,188,39)" fg:x="1049046846455" fg:w="128636594"/><text x="86.5873%" y="143.50"></text></g><g><title>pthread_mutex_trylock (190,943,825 samples, 0.02%)</title><rect x="86.3479%" y="149" width="0.0157%" height="15" fill="rgb(217,207,13)" fg:x="1049175483049" fg:w="190943825"/><text x="86.5979%" y="159.50"></text></g><g><title>[indexer] (9,945,364,909 samples, 0.82%)</title><rect x="85.5466%" y="165" width="0.8185%" height="15" fill="rgb(231,73,38)" fg:x="1039439809509" fg:w="9945364909"/><text x="85.7966%" y="175.50"></text></g><g><title>[libc.so.6] (4,238,793,418 samples, 0.35%)</title><rect x="86.3652%" y="165" width="0.3489%" height="15" fill="rgb(225,20,46)" fg:x="1049385174418" fg:w="4238793418"/><text x="86.6152%" y="175.50"></text></g><g><title>pthread_mutex_trylock (165,433,249 samples, 0.01%)</title><rect x="86.7163%" y="165" width="0.0136%" height="15" fill="rgb(210,31,41)" fg:x="1053651558587" fg:w="165433249"/><text x="86.9663%" y="175.50"></text></g><g><title>[indexer] (19,497,850,233 samples, 1.60%)</title><rect x="85.1292%" y="181" width="1.6047%" height="15" fill="rgb(221,200,47)" fg:x="1034368218464" fg:w="19497850233"/><text x="85.3792%" y="191.50"></text></g><g><title>[libc.so.6] (1,648,915,765 samples, 0.14%)</title><rect x="86.7339%" y="181" width="0.1357%" height="15" fill="rgb(226,26,5)" fg:x="1053866068697" fg:w="1648915765"/><text x="86.9839%" y="191.50"></text></g><g><title>[indexer] (997,175,899,560 samples, 82.07%)</title><rect x="4.8339%" y="197" width="82.0683%" height="15" fill="rgb(249,33,26)" fg:x="58734135418" fg:w="997175899560"/><text x="5.0839%" y="207.50">[indexer]</text></g><g><title>read (295,417,585 samples, 0.02%)</title><rect x="86.8778%" y="181" width="0.0243%" height="15" fill="rgb(235,183,28)" fg:x="1055614617393" fg:w="295417585"/><text x="87.1278%" y="191.50"></text></g><g><title>[libc.so.6] (295,417,585 samples, 0.02%)</title><rect x="86.8778%" y="165" width="0.0243%" height="15" fill="rgb(221,5,38)" fg:x="1055614617393" fg:w="295417585"/><text x="87.1278%" y="175.50"></text></g><g><title>[libc.so.6] (295,417,585 samples, 0.02%)</title><rect x="86.8778%" y="149" width="0.0243%" height="15" fill="rgb(247,18,42)" fg:x="1055614617393" fg:w="295417585"/><text x="87.1278%" y="159.50"></text></g><g><title>[libc.so.6] (295,417,585 samples, 0.02%)</title><rect x="86.8778%" y="133" width="0.0243%" height="15" fill="rgb(241,131,45)" fg:x="1055614617393" fg:w="295417585"/><text x="87.1278%" y="143.50"></text></g><g><title>[libc.so.6] (4,414,297,750 samples, 0.36%)</title><rect x="86.9022%" y="197" width="0.3633%" height="15" fill="rgb(249,31,29)" fg:x="1055910034978" fg:w="4414297750"/><text x="87.1522%" y="207.50"></text></g><g><title>[indexer] (1,060,542,300,633 samples, 87.28%)</title><rect x="0.0000%" y="213" width="87.2834%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1060542300633"/><text x="0.2500%" y="223.50">[indexer]</text></g><g><title>[indexer] (144,869,721 samples, 0.01%)</title><rect x="98.6556%" y="37" width="0.0119%" height="15" fill="rgb(238,160,17)" fg:x="1198720902588" fg:w="144869721"/><text x="98.9056%" y="47.50"></text></g><g><title>[indexer] (504,448,505 samples, 0.04%)</title><rect x="98.6335%" y="53" width="0.0415%" height="15" fill="rgb(214,148,48)" fg:x="1198452401198" fg:w="504448505"/><text x="98.8835%" y="63.50"></text></g><g><title>__madvise (585,941,806 samples, 0.05%)</title><rect x="98.6760%" y="53" width="0.0482%" height="15" fill="rgb(232,36,49)" fg:x="1198968353224" fg:w="585941806"/><text x="98.9260%" y="63.50"></text></g><g><title>[indexer] (2,442,616,571 samples, 0.20%)</title><rect x="98.5284%" y="69" width="0.2010%" height="15" fill="rgb(209,103,24)" fg:x="1197175387986" fg:w="2442616571"/><text x="98.7784%" y="79.50"></text></g><g><title>[indexer] (3,765,227,068 samples, 0.31%)</title><rect x="98.4323%" y="85" width="0.3099%" height="15" fill="rgb(229,88,8)" fg:x="1196008365971" fg:w="3765227068"/><text x="98.6823%" y="95.50"></text></g><g><title>pthread_mutex_trylock (264,784,889 samples, 0.02%)</title><rect x="98.7529%" y="85" width="0.0218%" height="15" fill="rgb(213,181,19)" fg:x="1199903443860" fg:w="264784889"/><text x="99.0029%" y="95.50"></text></g><g><title>[indexer] (5,334,151,647 samples, 0.44%)</title><rect x="98.3359%" y="101" width="0.4390%" height="15" fill="rgb(254,191,54)" fg:x="1194836311557" fg:w="5334151647"/><text x="98.5859%" y="111.50"></text></g><g><title>[libc.so.6] (132,022,965 samples, 0.01%)</title><rect x="98.7749%" y="101" width="0.0109%" height="15" fill="rgb(241,83,37)" fg:x="1200170463204" fg:w="132022965"/><text x="99.0249%" y="111.50"></text></g><g><title>[indexer] (6,663,147,515 samples, 0.55%)</title><rect x="98.2436%" y="117" width="0.5484%" height="15" fill="rgb(233,36,39)" fg:x="1193714559557" fg:w="6663147515"/><text x="98.4936%" y="127.50"></text></g><g><title>pthread_mutex_trylock (454,341,850 samples, 0.04%)</title><rect x="98.8035%" y="117" width="0.0374%" height="15" fill="rgb(226,3,54)" fg:x="1200517480771" fg:w="454341850"/><text x="99.0535%" y="127.50"></text></g><g><title>[indexer] (9,286,271,664 samples, 0.76%)</title><rect x="98.0770%" y="133" width="0.7643%" height="15" fill="rgb(245,192,40)" fg:x="1191690388545" fg:w="9286271664"/><text x="98.3270%" y="143.50"></text></g><g><title>[unknown] (366,307,846 samples, 0.03%)</title><rect x="98.8428%" y="133" width="0.0301%" height="15" fill="rgb(238,167,29)" fg:x="1200995934760" fg:w="366307846"/><text x="99.0928%" y="143.50"></text></g><g><title>[indexer] (366,307,846 samples, 0.03%)</title><rect x="98.8428%" y="117" width="0.0301%" height="15" fill="rgb(232,182,51)" fg:x="1200995934760" fg:w="366307846"/><text x="99.0928%" y="127.50"></text></g><g><title>pthread_mutex_trylock (176,262,423 samples, 0.01%)</title><rect x="98.8730%" y="133" width="0.0145%" height="15" fill="rgb(231,60,39)" fg:x="1201362242606" fg:w="176262423"/><text x="99.1230%" y="143.50"></text></g><g><title>[indexer] (11,893,148,699 samples, 0.98%)</title><rect x="97.9091%" y="149" width="0.9788%" height="15" fill="rgb(208,69,12)" fg:x="1189650482607" fg:w="11893148699"/><text x="98.1591%" y="159.50"></text></g><g><title>[libc.so.6] (2,286,547,531 samples, 0.19%)</title><rect x="98.8879%" y="149" width="0.1882%" height="15" fill="rgb(235,93,37)" fg:x="1201543631306" fg:w="2286547531"/><text x="99.1379%" y="159.50"></text></g><g><title>[indexer] (20,153,204,270 samples, 1.66%)</title><rect x="97.4263%" y="165" width="1.6586%" height="15" fill="rgb(213,116,39)" fg:x="1183784681424" fg:w="20153204270"/><text x="97.6763%" y="175.50"></text></g><g><title>[libc.so.6] (8,878,328,922 samples, 0.73%)</title><rect x="99.0850%" y="165" width="0.7307%" height="15" fill="rgb(222,207,29)" fg:x="1203937885694" fg:w="8878328922"/><text x="99.3350%" y="175.50"></text></g><g><title>[indexer] (92,835,859,101 samples, 7.64%)</title><rect x="92.1783%" y="181" width="7.6405%" height="15" fill="rgb(206,96,30)" fg:x="1120017769626" fg:w="92835859101"/><text x="92.4283%" y="191.50">[indexer]</text></g><g><title>[libc.so.6] (649,891,482 samples, 0.05%)</title><rect x="99.8187%" y="181" width="0.0535%" height="15" fill="rgb(218,138,4)" fg:x="1212853628727" fg:w="649891482"/><text x="100.0687%" y="191.50"></text></g><g><title>[indexer] (153,040,268,998 samples, 12.60%)</title><rect x="87.2931%" y="197" width="12.5953%" height="15" fill="rgb(250,191,14)" fg:x="1060660131131" fg:w="153040268998"/><text x="87.5431%" y="207.50">[indexer]</text></g><g><title>[unknown] (154,374,829,239 samples, 12.71%)</title><rect x="87.2931%" y="213" width="12.7052%" height="15" fill="rgb(239,60,40)" fg:x="1060660131131" fg:w="154374829239"/><text x="87.5431%" y="223.50">[unknown]</text></g><g><title>[unknown] (1,310,857,027 samples, 0.11%)</title><rect x="99.8904%" y="197" width="0.1079%" height="15" fill="rgb(206,27,48)" fg:x="1213724103343" fg:w="1310857027"/><text x="100.1404%" y="207.50"></text></g><g><title>[indexer] (1,310,857,027 samples, 0.11%)</title><rect x="99.8904%" y="181" width="0.1079%" height="15" fill="rgb(225,35,8)" fg:x="1213724103343" fg:w="1310857027"/><text x="100.1404%" y="191.50"></text></g><g><title>all (1,215,056,204,812 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="1215056204812"/><text x="0.2500%" y="255.50"></text></g><g><title>indexer (1,215,056,204,812 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="1215056204812"/><text x="0.2500%" y="239.50">indexer</text></g></svg></svg>